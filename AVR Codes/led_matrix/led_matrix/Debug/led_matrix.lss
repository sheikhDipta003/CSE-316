
led_matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  00000104  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e4  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005eb  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  00000fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 33       	cpi	r26, 0x30	; 48
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	return (n >> d) | (n << (SIZE - d));
}

int main(void)
{
    DDRA = 0xFF;	//row
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;	//column
  86:	81 bb       	out	0x11, r24	; 17
	int alpha_no = 0, cell_no = 0, render_count = 0;	//render_count -> in order to fix the duration that each letter is displayed for (2ms x 250 = 500ms)
	int k = 0;											//keeps count of number of iterations of the outermost while loop
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	70 e0       	ldi	r23, 0x00	; 0

int main(void)
{
    DDRA = 0xFF;	//row
	DDRD = 0xFF;	//column
	int alpha_no = 0, cell_no = 0, render_count = 0;	//render_count -> in order to fix the duration that each letter is displayed for (2ms x 250 = 500ms)
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
			//alpha_no = 0;
			//cell_no = 0;
		//}
		
		//flash a letter, i.e display it for some time, then make it disappear before displaying it again and so on
		for(render_count = 0; render_count < 250; render_count++){		//sets a row pin in led matrix at each iteration
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	25 c0       	rjmp	.+74     	; 0xe0 <main+0x5e>
			PORTA = 1<<cell_no;		//Each cell in cols_alpha matrix corresponds to the state of 8 column pins for that row pin in led matrix
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	08 2e       	mov	r0, r24
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x20>
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	0a 94       	dec	r0
  a4:	e2 f7       	brpl	.-8      	; 0x9e <main+0x1c>
  a6:	2b bb       	out	0x1b, r18	; 27
			if(k % 2 == 0)	PORTD = ~cols_alpha[alpha_no][cell_no];
  a8:	60 fd       	sbrc	r22, 0
  aa:	07 c0       	rjmp	.+14     	; 0xba <main+0x38>
  ac:	fc 01       	movw	r30, r24
  ae:	e0 5a       	subi	r30, 0xA0	; 160
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	20 81       	ld	r18, Z
  b4:	20 95       	com	r18
  b6:	22 bb       	out	0x12, r18	; 18
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x3c>
			else	PORTD = OFF_COLUMN;
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	e3 ef       	ldi	r30, 0xF3	; 243
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x40>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x46>
  c8:	00 00       	nop
			_delay_ms(2);
			cell_no = (cell_no + 1) % SIZE;
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	87 70       	andi	r24, 0x07	; 7
  ce:	90 78       	andi	r25, 0x80	; 128
  d0:	99 23       	and	r25, r25
  d2:	24 f4       	brge	.+8      	; 0xdc <main+0x5a>
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	88 6f       	ori	r24, 0xF8	; 248
  d8:	9f 6f       	ori	r25, 0xFF	; 255
  da:	01 96       	adiw	r24, 0x01	; 1
			//alpha_no = 0;
			//cell_no = 0;
		//}
		
		//flash a letter, i.e display it for some time, then make it disappear before displaying it again and so on
		for(render_count = 0; render_count < 250; render_count++){		//sets a row pin in led matrix at each iteration
  dc:	4f 5f       	subi	r20, 0xFF	; 255
  de:	5f 4f       	sbci	r21, 0xFF	; 255
  e0:	4a 3f       	cpi	r20, 0xFA	; 250
  e2:	51 05       	cpc	r21, r1
  e4:	c4 f2       	brlt	.-80     	; 0x96 <main+0x14>
			//}
			//_delay_ms(2);
			//cell_no = (cell_no + 1) % SIZE;
		//}
		
		k = (k + 1) % SIZE;
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	67 70       	andi	r22, 0x07	; 7
  ec:	70 78       	andi	r23, 0x80	; 128
  ee:	77 23       	and	r23, r23
  f0:	7c f6       	brge	.-98     	; 0x90 <main+0xe>
  f2:	61 50       	subi	r22, 0x01	; 1
  f4:	71 09       	sbc	r23, r1
  f6:	68 6f       	ori	r22, 0xF8	; 248
  f8:	7f 6f       	ori	r23, 0xFF	; 255
  fa:	6f 5f       	subi	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
    }
  fe:	c8 cf       	rjmp	.-112    	; 0x90 <main+0xe>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
